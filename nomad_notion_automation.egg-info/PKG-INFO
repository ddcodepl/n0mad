Metadata-Version: 2.4
Name: nomad-notion-automation
Version: 0.2.0
Summary: Global Notion task refinement and automation tool with AI integration
Author: Nomad Development Team
Maintainer: Nomad Development Team
License: MIT
Project-URL: Homepage, https://github.com/nomad-notion-automation/nomad
Project-URL: Repository, https://github.com/nomad-notion-automation/nomad.git
Project-URL: Documentation, https://github.com/nomad-notion-automation/nomad/blob/main/README.md
Project-URL: Bug Tracker, https://github.com/nomad-notion-automation/nomad/issues
Keywords: notion,automation,ai,task-management,openai,anthropic
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Office/Business :: Office Suites
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Utilities
Requires-Python: >=3.8.1
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp>=3.9.0
Requires-Dist: notion-client>=2.2.1
Requires-Dist: openai>=1.35.0
Requires-Dist: psutil>=7.0.0
Requires-Dist: python-dotenv>=1.0.1
Requires-Dist: pathlib2>=2.3.0; python_version < "3.4"
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Dynamic: license-file

# Nomad - Notion Task Automation Tool

[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

A powerful, globally-installable command-line tool for automating Notion task processing with AI integration. Supports OpenAI, Anthropic, and OpenRouter for intelligent task refinement and automation.

## üöÄ Features

- **Global Installation**: Install once, use anywhere on your system
- **Multi-AI Provider Support**: OpenAI, Anthropic Claude, and OpenRouter integration
- **Secure Configuration**: Environment variable management with validation and security checks
- **Directory Independence**: Run from any directory with automatic path resolution
- **Comprehensive CLI**: Rich command-line interface with configuration management
- **Task Processing Modes**: Multiple modes for different workflow requirements
- **Robust Error Handling**: Comprehensive logging and error recovery
- **Performance Monitoring**: Built-in performance tracking and metrics

## üì¶ Quick Installation

### Automatic Installation (Recommended)

```bash
curl -sSL https://raw.githubusercontent.com/nomad-notion-automation/nomad/main/install.sh | bash
```

### Manual Installation

```bash
pip install nomad-notion-automation
```

### Development Installation

```bash
git clone https://github.com/nomad-notion-automation/nomad.git
cd nomad
pip install -e .
```

## ‚öôÔ∏è Configuration

### Quick Setup

1. **Get configuration help:**
   ```bash
   nomad --config-help
   ```

2. **Create configuration template:**
   ```bash
   nomad --config-create
   ```

3. **Check configuration status:**
   ```bash
   nomad --config-status
   ```

### Required Environment Variables

| Variable | Description | Required |
|----------|-------------|----------|
| `NOTION_TOKEN` | Your Notion integration token | ‚úÖ Yes |
| `NOTION_BOARD_DB` | Your Notion database ID | ‚úÖ Yes |

### AI Provider API Keys (at least one required)

| Variable | Description | Provider |
|----------|-------------|----------|
| `OPENAI_API_KEY` | OpenAI API key | OpenAI |
| `OPENROUTER_API_KEY` | OpenRouter API key | OpenRouter |
| `ANTHROPIC_API_KEY` | Anthropic API key | Anthropic |

### Optional Configuration

| Variable | Description | Default |
|----------|-------------|---------|
| `NOMAD_HOME` | Base directory for Nomad files | `~/.nomad` |
| `NOMAD_TASKS_DIR` | Directory for task files | `~/.nomad/tasks` |
| `NOMAD_LOG_LEVEL` | Logging level | `INFO` |
| `NOMAD_MAX_CONCURRENT_TASKS` | Max concurrent task processing | `3` |
| `NOMAD_CONFIG_FILE` | Path to global config file | `~/.nomad/config.env` |

### Configuration Methods

#### 1. Environment Variables
```bash
export NOTION_TOKEN="your_notion_token_here"
export NOTION_BOARD_DB="your_database_id_here"
export OPENAI_API_KEY="your_openai_key_here"
```

#### 2. Local .env File
Create a `.env` file in your working directory:
```env
NOTION_TOKEN=your_notion_token_here
NOTION_BOARD_DB=your_database_id_here
OPENAI_API_KEY=your_openai_key_here
```

#### 3. Global Configuration File
```bash
# Create template
nomad --config-create

# Edit the created file at ~/.nomad/config.env
# Set environment variable to use it
export NOMAD_CONFIG_FILE=~/.nomad/config.env
```

## üîë Getting API Keys

### Notion Setup

1. Go to [Notion Integrations](https://www.notion.so/my-integrations)
2. Create a new integration
3. Copy the Internal Integration Token (`NOTION_TOKEN`)
4. Share your database with the integration
5. Copy the database ID from the database URL (`NOTION_BOARD_DB`)

### AI Provider Setup

#### OpenAI
1. Visit [OpenAI API Keys](https://platform.openai.com/api-keys)
2. Create a new API key
3. Copy the key (starts with `sk-`)

#### Anthropic
1. Visit [Anthropic Console](https://console.anthropic.com/)
2. Go to API Keys section
3. Create a new key (starts with `sk-ant-`)

#### OpenRouter
1. Visit [OpenRouter Keys](https://openrouter.ai/keys)
2. Create a new API key
3. Copy the key (starts with `sk-or-`)

## üñ•Ô∏è Usage

### Basic Commands

```bash
# Show help
nomad --help

# Show version
nomad --version

# Configuration management
nomad --config-help          # Show configuration help
nomad --config-create        # Create configuration template
nomad --config-status        # Show current configuration status
```

### Processing Modes

```bash
# Continuous polling mode (default)
nomad

# Process 'To Refine' status tasks
nomad --refine

# Process 'Prepare Tasks' status
nomad --prepare

# Process 'Queued to run' status tasks
nomad --queued

# Multi-status processing mode
nomad --multi
```

### Advanced Options

```bash
# Set working directory
nomad --working-dir /path/to/project

# Run from any directory
cd /anywhere
nomad --config-status
```

## üîß Development

### Prerequisites

- Python 3.8 or higher
- pip or pipx for installation

### Development Setup

```bash
# Clone repository
git clone https://github.com/nomad-notion-automation/nomad.git
cd nomad

# Install in development mode
pip install -e .

# Install development dependencies
pip install -e .[dev]

# Run tests
pytest

# Format code
black .
isort .

# Type checking
mypy .
```

### Project Structure

```
nomad/
‚îú‚îÄ‚îÄ clients/              # API client implementations
‚îú‚îÄ‚îÄ core/                 # Core processing logic
‚îú‚îÄ‚îÄ entry/                # CLI entry point
‚îú‚îÄ‚îÄ utils/                # Utility modules
‚îú‚îÄ‚îÄ tests/                # Test suite
‚îú‚îÄ‚îÄ install.sh            # Installation script
‚îú‚îÄ‚îÄ pyproject.toml        # Package configuration
‚îî‚îÄ‚îÄ README.md             # This file
```

## üîí Security

### API Key Security

- API keys are automatically masked in logs
- Sensitive data is never exposed in error messages
- Configuration validation includes security checks
- Support for secure configuration files with proper permissions

### Best Practices

1. Use configuration files instead of environment variables for production
2. Set proper file permissions (600) on configuration files
3. Regularly rotate API keys
4. Monitor logs for security warnings

## üêõ Troubleshooting

### Common Issues

#### Installation Problems

```bash
# If nomad command not found after installation
export PATH=$PATH:~/.local/bin

# Check if installation succeeded
pip show nomad-notion-automation
```

#### Configuration Issues

```bash
# Check configuration status
nomad --config-status

# Validate configuration
nomad --config-help

# Test from different directory
cd /tmp && nomad --version
```

#### API Connection Problems

```bash
# Check API key formats
nomad --config-status

# Test with minimal configuration
nomad --config-create
# Edit config file and test
nomad --config-status
```

### Debug Mode

Enable debug logging:
```bash
export NOMAD_LOG_LEVEL=DEBUG
nomad --config-status
```

### Getting Help

1. Check configuration: `nomad --config-status`
2. Review logs in `~/.nomad/logs/`
3. Consult this documentation
4. [Open an issue](https://github.com/nomad-notion-automation/nomad/issues)

## üìù Changelog

### v0.2.0
- Global installation support
- Enhanced security and configuration management
- Multi-provider AI integration
- Comprehensive CLI interface
- Directory-independent execution

### v0.1.0
- Initial release
- Basic Notion integration
- OpenAI processing

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- [Notion API](https://developers.notion.com/) for the excellent API
- [OpenAI](https://openai.com/) for AI capabilities
- [Anthropic](https://anthropic.com/) for Claude integration
- [OpenRouter](https://openrouter.ai/) for multi-model access

---

**Made with ‚ù§Ô∏è by the Nomad Development Team**
